name: 'Deploy To Ecr'

on:
  push:
    branches: [ 'development1' ]
#    paths:
#      - '**docker-cicd.yml'

env:
  BUCKET_NAME: "fran-prueba-template"
  BUCKET_PREFIX: "templates/docker/app-go"
  AWS_REGION: "us-east-1" #Change to reflect your Region
  STACK_NAME: "fran-0000-test-all-cf-go-app-v1"
  IAM_ROLE: "arn:aws:iam::917972781642:role/fran-0000-devops-test-iam-role-github"
  ECR_REPOSITORY: "fran-0000-devops-prod-00-ecr-repo-app"   # set this to your Amazon ECR repository name
  ECS_TASK_DEFINITION: "./aws/task-definition.json"
  CONTAINER_NAME: "fran-0000-devops-prod-01-ecs-task-golang"
  ECS_SERVICE: "fran-0000-devops-prod-01-ecs-service-golang"
  ECS_CLUSTER: "fran-0000-devops-prod-00-ecs-cluster-app"

# Permission can be added at job level or workflow level
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout
jobs:
  Build:
    runs-on: ubuntu-latest
    outputs:
      BUCKET_URI: ${{ steps.setOutput1.outputs.BUCKET_URI }}
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.IAM_ROLE }} #change to reflect your IAM roleâ€™s ARN
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Set the date as an environment variable
        run: |
          echo "DATE=$(date +'%Y-%m-%d-%H-%M-%S')" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true